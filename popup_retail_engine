from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest
import datetime
import time
import re
import json
import globals
import popup_retail_methods
import page_objects

# TODO:
# Fix regex for identifying data of interest.

class popup_retail(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(10)
        self.verificationErrors = []
        self.accept_next_alert = True        
    
    # Engine has to start with string 'test' for unittest to work.
    def test_engine(self):
        driver = self.driver

        current_path = globals.get_current_path()
        current_path = current_path.replace('Engine','')
        ts = globals.get_timestamp()
        output_file = open(current_path + 'outputs\\nyc_popup_retail_data_' + ts + '.csv','w')
        debug_file = open(current_path + 'debug\\nyc_popup_retail_debug_' + ts + '.txt','w')
        
        delimiter = globals.get_delimiter()
        headers = globals.get_header(delimiter)
        output_file.write(headers + '\n')

        # landing_url = globals.get_landing_url()
        # driver.get(landing_url)

        landing_urls = globals.get_landing_urls()
        for landing_url in landing_urls:
            driver.get(landing_urls[landing_url])

            try:
                number_of_pages = driver.find_element(By.XPATH, '(.//*[normalize-space(text()) and normalize-space(.)="'"..."'"])[1]/following::li[1]').text
                number_of_pages = int(number_of_pages)
            except:
                number_of_pages = 1

            page_number = 0
            page_data = []

            while page_number < number_of_pages:
                landing_page_text = driver.find_element(By.XPATH, '(.//*[normalize-space(text()) and normalize-space(.)="'"Loading Listings"'"])[1]/following::div[1]').text
                landing_page_text = globals.clean_page_text(landing_page_text)
                xpaths_to_navigate = popup_retail_methods.build_xpaths(landing_page_text)

                for xpath in xpaths_to_navigate:
                    try:
                        driver.find_element(By.XPATH, xpath).click()
                        driver.switch_to.window(driver.window_handles[1])

                        try:
                            tab_data = driver.find_element(By.XPATH, '(.//*[normalize-space(text()) and normalize-space(.)="'"Login"'"])[1]/following::div[9]').text
                            tab_data = globals.clean_page_text(tab_data)
                            debug_file.write(tab_data + '\n\n')
                            page_data.append(tab_data)
                        except:
                            url = str(driver.current_url)
                            print('Error at retrieving data on "%s".\n' % (url))
                            debug_file.write('Error at retrieving data on "%s".\n' % (url))
                            
                        driver.close()
                        driver.switch_to.window(driver.window_handles[0])
                        tab_data = ''
                    except:
                        url = str(driver.current_url)
                        print('Error at opening xpath "%s" from page "%s".\n' % (xpath, url))
                        debug_file.write('Error at opening xpath "%s" from page "%s".\n' % (xpath, url))

                page_number += 1
                landing_page_text = ''
                xpaths_to_navigate = []

                try:
                    multi_pages = driver.find_element(By.XPATH, '(.//*[normalize-space(text()) and normalize-space(.)="'"..."'"])[1]/following::i[1]')
                    if multi_pages == True:
                        driver.find_element(By.XPATH, '(.//*[normalize-space(text()) and normalize-space(.)="'"..."'"])[1]/following::i[1]').click()
                    else:
                        driver.find_element(By.XPATH, '(.//*[normalize-space(text()) and normalize-space(.)="'"per day"'"])[' + len(xpaths_to_navigate) + ']/following::i[1]').click()
                except:
                    url = str(driver.current_url)
                    print('Error navigating to next page from URL %s.\n' % (url))
                    debug_file.write('Error navigating to next page from URL %s.\n' % (url))
                    break

            for page in page_data:
                listing_data_row = popup_retail_methods.get_listing_data(page, headers)
                output_file.write(listing_data_row + '\n')

        output_file.close()
        debug_file.close()

    def is_element_present(self, how, what):
        try:
            self.driver.find_element(by = how, value = what)
        except NoSuchElementException:
            print(str(how) + ' ' + str(what))
            return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally:
            print(alert_text)
            self.accept_next_alert = True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == '__main__':
    unittest.main()
